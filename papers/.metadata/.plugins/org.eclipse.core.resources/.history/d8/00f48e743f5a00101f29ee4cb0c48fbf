SimpleSwitchMorph subclass: #SBECell	instanceVariableNames: 'mouseAction'	classVariableNames: ''	poolDictionaries: ''	category: 'SBE--Quinto'!!SBECell methodsFor: 'accessing protocol' stamp: 'MK 3/25/2011 16:17'!mouseAction: aBlock^ mouseAction := aBlock! !!SBECell methodsFor: 'initialization' stamp: 'MK 3/26/2011 23:28'!initialize  super initialize.  self label: ''.  self borderWidth: 2.  bounds := 0@0 corner: 16@16.  offColor := Color paleYellow.  onColor := Color paleBlue darker.  self useSquareCorners.  self turnOff! !!SBECell methodsFor: 'event handling' stamp: 'MK 3/25/2011 16:24'!mouseUp: anEventmouseAction value! !BorderedMorph subclass: #SBEGame	instanceVariableNames: 'cells'	classVariableNames: ''	poolDictionaries: ''	category: 'SBE--Quinto'!!SBEGame methodsFor: 'as yet unclassified' stamp: 'MK 3/26/2011 23:39'!cellsPerSide"The number of cells along each side of the game"^ 10! !!SBEGame methodsFor: 'as yet unclassified' stamp: 'MK 3/29/2011 10:54'!newCellAt: i at: j"Create a cell for position (i,j) and add it to my on--screenrepresentation at the appropriate screen position. Answer the new cell"| c origin |c := SBECell new.origin := self innerBounds origin.self addMorph: c.c position: ((i-1) * c width) @ ((j-1) * c height) + origin.c mouseAction: [self toggleNeighboursOfCellAt: i at: j].^ c! !!SBEGame methodsFor: 'game logic' stamp: 'MK 3/29/2011 10:57'!toggleNeighboursOfCellAt: i at: j(i > 1) ifTrue: [ (cells at: i - 1 at: j ) toggleState].(i < self cellsPerSide) ifTrue: [ (cells at: i + 1 at: j) toggleState].(j > 1) ifTrue: [ (cells at: i at: j - 1) toggleState].(j < self cellsPerSide) ifTrue: [ (cells at: i at: j + 1) toggleState].! !!SBEGame methodsFor: 'initialization' stamp: 'MK 3/29/2011 10:54'!initialize| sampleCell width height n |super initialize.n := self cellsPerSide.sampleCell := SBECell new.width := sampleCell width.height := sampleCell height.self bounds: (5@5 extent: ((width*n) @(height*n)) + (2 * self borderWidth)).cells := Matrix new: n tabulate: [ :i :j | self newCellAt: i at: j ].! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!SBEGame class	instanceVariableNames: 'height width n c'!