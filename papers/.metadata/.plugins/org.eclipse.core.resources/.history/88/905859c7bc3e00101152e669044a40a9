\title{Expression evaluation} \author{
        Martin Kozeny\\
        CSCI 4501: Programming Language Structure\\
        Spring 2011
        University of New Orleans
}
\date{\today}




\documentclass[5pt]{article}
\usepackage{graphicx}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{qtree}
\usepackage{multicol}
%\usepackage{chemarrow}
\usepackage[utf8]{inputenc}
\usepackage{listings}
  \usepackage{courier}
 
 \lstset{language=Java,
         basicstyle=\footnotesize\ttfamily, % Standardschrift
         %numbers=left,               % Ort der Zeilennummern
         numberstyle=\tiny,          % Stil der Zeilennummern
         %stepnumber=2,               % Abstand zwischen den Zeilennummern
         numbersep=5pt,              % Abstand der Nummern zum Text
         tabsize=2,                  % Groesse von Tabs
         extendedchars=true,         %
         breaklines=true,            % Zeilen werden Umgebrochen
         keywordstyle=\color{blue},
         %       frame=b,         
         keywordstyle=[1]\textbf,    % Stil der Keywords
         keywordstyle=[2]\color{blue},    %
 %        keywordstyle=[3]\textbf,    %
 %        keywordstyle=[4]\textbf,   \sqrt{\sqrt{}} %
         %stringstyle=\color{white}\ttfamily, % Farbe der String
         showspaces=false,           % Leerzeichen anzeigen ?
         showtabs=false,             % Tabs anzeigen ?
         xleftmargin=17pt,
         framexleftmargin=17pt,
         framexrightmargin=5pt,
         framexbottommargin=4pt,
         %backgroundcolor=\color{lightgray},
         showstringspaces=false      % Leerzeichen in Strings anzeigen ?        
 }
 \lstloadlanguages{% Check Dokumentation for further languages ...
         %[Visual]Basic
         %Pascal
         %C
         %C++
         %XML
         %HTML
         %Lisp
         Java
 }


\setlength{\hoffset}{-2.3cm} 
\setlength{\voffset}{-3cm}
\setlength{\textheight}{24.0cm} 
\setlength{\textwidth}{16cm}


\begin{document}


\maketitle

\section{Expression evaluation in Java}
According to chapter 15, part 7 from \cite{java:jls},
is Java's evaluation order from left to right, so the result of calling
code below \verb|a*f(1) + a| will be $10 * 1*11 + 11 = 121$\newline
\lstinputlisting[language=Java]{src/Main.java}

%\Tree [.E [.E [.E a]+[.E a]]+[.E a]]

%\Tree [.E [.E a ] + [.E [.E ]+ [.E ] ] ]
\begin{multicols}{2}


  
	(a)\Tree [.E [.E {a}(27)  ].E - [.E [.E {a}(4) ]+ [.E {a}(3) ] ] ].E
	
  


  
	(b)\Tree [.E [.E [.E {a}(27) ]- [.E {a}(4) ]  ].E + [.E {a}(3) ] ].E
\end{multicols}
\section{Unambiguous grammar}
Now we have to change rules in order to get unambiguous grammar. In other words
we have to create grammar with left associativity. Due to this fact, we add new
nonterminal symbol $T$ (term). This nonterminal symbol guarantees, that on the
left side of parse tree will be nonterminal $E$ (expression), which has to be
evaluated first in order to get the left operand. Whole grammar will looks that:
$G$ = (\{$E$, $T$\}, \{$a$, $+$, $-$\}, \{ $E \rightarrow E + T | E - T | T$, $T
\rightarrow T + a | T - a | a$ \}, $E$). Using this
rules for same expression, we get by derivation tree (c) shown below
result 26 because of keeping left associativity. Rules:\newline
\begin{enumerate} 
  \item $E \rightarrow E + T$
  \item $E \rightarrow E - T$
  \item $E \rightarrow T$
  \item $T \rightarrow T + a$
  \item $T \rightarrow T - a$ 
  \item $T \rightarrow a$
\end{enumerate}
%\Tree [.E [ [ [a].T ].E+ [ a ].E  ].E + [ a ].E ].E
%\Tree [.E [.E [.E a ]+ [.E a ]  ].E + [.E a ] ].E

	%\Tree [.E  [[ a ].E + [.T a ]].E + [.T a ].T  ]
	(c)\Tree [.E [[[{a}(27) ].T ].E - [{a}(4) ].T ].E + [ {a}(3) ].T ]
\newline
\newline
\newline To add precedence of operations $*$ and $/$ before $+$ and $-$, we have
to put this operations into grammar in such way, that operations $*$ and $/$ are
evaluated always before $+$ and $-$ and towards operations $+$ and $-$ goes only
result of operations $*$ and $/$ keeping left associativity. Let's take e.g.
expression $27 - 4 + 2 * 5$. We change grammar to $G$ = (\{$E$, $T$\}, \{$a$,
$+$, $-$, $*$, $/$\}, \{ $E \rightarrow E + T | E - T | T$, $T \rightarrow T * a | T / a | a$ \}, $E$) and for testing expression get right result $33$ from derivation tree (d).
Rules:\newline
\begin{enumerate} 
  \item $E \rightarrow E + T$
  \item $E \rightarrow E - T$
  \item $E \rightarrow T$
  \item $T \rightarrow T * a$
  \item $T \rightarrow T / a$ 
  \item $T \rightarrow a$
\end{enumerate}


(d)\Tree [.E [[[{a}(27) ].T ].E - [{a}(4) ].T ].E + [ [{a}(2) ].T *
{a}(5) ].T ]
\newline
\newline
\newline This context-free grammar is not LL1 grammar according to rules for LL1
grammar in \cite{muller:programovaci_jazyky}, page 54. For LL1 grammar hold:
right side of rule which is used for expansion of nonterminal symbol at the top
of the stack is unambiguously determined on this nonterminal symbol and one
ahead readed input symbol (terminal). From shown rules, we can see that this
grammar contains right recursion, which has to be for LL1 grammar eliminated.

\begin{thebibliography}{1}

\bibitem{java:jls}
Java Language specification, \verb|http://java.sun.com/docs/books/jls/|.

\end{thebibliography}



\end{document}
